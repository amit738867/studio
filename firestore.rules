/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for campaigns and delivery statuses,
 *              while allowing public read access to certificate templates.
 *
 * Data Structure:
 * - /certificateTemplates/{certificateTemplateId}: Stores publicly readable certificate templates.
 * - /users/{userId}/campaigns/{campaignId}: Stores campaigns owned by a specific user.
 * - /users/{userId}/campaigns/{campaignId}/deliveryStatuses/{deliveryStatusId}: Stores delivery statuses for campaigns, also owned by the user.
 *
 * Key Security Decisions:
 * - Certificate templates are publicly readable, but only authorized users can create, update, or delete them.
 * - Campaigns and delivery statuses are strictly user-owned, with no shared access or roles implemented in this version.
 * - Listing of user's campaigns and delivery statuses is allowed for the owner.
 *
 * Denormalization for Authorization:
 * - Campaigns are stored under /users/{userId} to enable path-based ownership checks.
 * - Delivery statuses are stored under /users/{userId}/campaigns/{campaignId} for similar ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to certificate templates, but requires authentication for creation, updates, and deletion.
     * @path /certificateTemplates/{certificateTemplateId}
     * @allow (get, list): if true
     * @allow (create): if isSignedIn()
     * @allow (update): if isSignedIn()
     * @allow (delete): if isSignedIn()
     * @deny (create): if !isSignedIn()
     * @deny (update): if !isSignedIn()
     * @deny (delete): if !isSignedIn()
     * @principle Allows public read with authenticated owner-only writes.
     */
    match /certificateTemplates/{certificateTemplateId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Enforces user-ownership for campaigns. Only the authenticated user can create, read, update, or delete their own campaigns.
     * @path /users/{userId}/campaigns/{campaignId}
     * @allow (get, list): if isOwner(userId)
     * @allow (create): if isOwner(userId)
     * @allow (update): if isExistingOwner(userId)
     * @allow (delete): if isExistingOwner(userId)
     * @deny (create): if !isOwner(userId)
     * @deny (update): if !isExistingOwner(userId)
     * @deny (delete): if !isExistingOwner(userId)
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/campaigns/{campaignId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for delivery statuses. Only the authenticated user who owns the parent campaign can manage delivery statuses.
     * @path /users/{userId}/campaigns/{campaignId}/deliveryStatuses/{deliveryStatusId}
     * @allow (get, list): if isOwner(userId)
     * @allow (create): if isOwner(userId)
     * @allow (update): if isExistingOwner(userId)
     * @allow (delete): if isExistingOwner(userId)
     * @deny (create): if !isOwner(userId)
     * @deny (update): if !isExistingOwner(userId)
     * @deny (delete): if !isExistingOwner(userId)
     * @principle Enforces document ownership for writes and validates relational integrity.
     */
    match /users/{userId}/campaigns/{campaignId}/deliveryStatuses/{deliveryStatusId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    // --- Helper functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}