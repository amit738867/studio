/**
 * @fileoverview Firestore Security Rules for Certificate Generation App
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for campaigns and their associated data.
 * Users can only create, read, update, and delete campaigns and participants that they own.
 *
 * Data Structure:
 * - /users/{userId}/campaigns/{campaignId}: Campaigns created by a user.
 * - /users/{userId}/campaigns/{campaignId}/participants/{participantId}: Participants in a campaign.
 *
 * Key Security Decisions:
 * - Users can only manage campaigns and participants they own.
 * - No public listing of users or campaigns is allowed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @returns {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing resource.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for documents in the /users/{userId}/campaigns/{campaignId} collection.
     * @path /databases/{database}/documents/users/{userId}/campaigns/{campaignId}
     * @allow (create) Signed-in user 'user123' can create a new campaign under their own user ID: request.auth.uid == 'user123'
     * @allow (get) Signed-in user 'user123' can retrieve their own campaign: request.auth.uid == 'user123'
     * @allow (update) Signed-in user 'user123' can update their own campaign: request.auth.uid == 'user123'
     * @allow (delete) Signed-in user 'user123' can delete their own campaign: request.auth.uid == 'user123'
     * @deny (create) Signed-in user 'user456' cannot create a campaign under 'user123': request.auth.uid != 'user123'
     * @deny (get) Signed-in user 'user456' cannot retrieve campaign of 'user123': request.auth.uid != 'user123'
     * @deny (update) Signed-in user 'user456' cannot update campaign of 'user123': request.auth.uid != 'user123'
     * @deny (delete) Signed-in user 'user456' cannot delete campaign of 'user123': request.auth.uid != 'user123'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/campaigns/{campaignId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for documents in the /users/{userId}/campaigns/{campaignId}/participants/{participantId} collection.
     * @path /databases/{database}/documents/users/{userId}/campaigns/{campaignId}/participants/{participantId}
     * @allow (create) Signed-in user 'user123' can create a new participant under their own campaign: request.auth.uid == 'user123'
     * @allow (get) Signed-in user 'user123' can retrieve a participant under their own campaign: request.auth.uid == 'user123'
     * @allow (update) Signed-in user 'user123' can update a participant under their own campaign: request.auth.uid == 'user123'
     * @allow (delete) Signed-in user 'user123' can delete a participant under their own campaign: request.auth.uid == 'user123'
     * @deny (create) Signed-in user 'user456' cannot create a participant under campaign of 'user123': request.auth.uid != 'user123'
     * @deny (get) Signed-in user 'user456' cannot retrieve a participant under campaign of 'user123': request.auth.uid != 'user123'
     * @deny (update) Signed-in user 'user456' cannot update a participant under campaign of 'user123': request.auth.uid != 'user123'
     * @deny (delete) Signed-in user 'user456' cannot delete a participant under campaign of 'user123': request.auth.uid != 'user123'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/campaigns/{campaignId}/participants/{participantId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}