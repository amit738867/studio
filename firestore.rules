/**
 * @fileoverview Firestore Security Rules for CertifyAI.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for campaigns and delivery statuses,
 * ensuring that only the owner (creator) of a campaign can manage it and its
 * associated delivery statuses. Certificate Templates are publicly readable,
 * but write access is unrestricted to allow any user to create them.
 *
 * Data Structure:
 * - /certificateTemplates/{certificateTemplateId}: Stores certificate templates.
 * - /users/{userId}/campaigns/{campaignId}: Stores campaigns created by a specific user.
 * - /users/{userId}/campaigns/{campaignId}/deliveryStatuses/{deliveryStatusId}: Stores delivery statuses for a campaign.
 *
 * Key Security Decisions:
 * - Certificate Templates are publicly readable but writable by anyone, facilitating a shared template library.
 * - Campaigns and DeliveryStatuses are strictly user-owned.
 * - Listing of campaigns and delivery statuses is restricted to the owner.
 *
 * Denormalization for Authorization:
 *  The `campaigns` and `deliveryStatuses` are stored under the `users/{userId}` collection
 *  to allow for secure and efficient rules without the need of `get()` requests.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read certificate templates, but allows anyone to create, update, and delete them.
     * @path /certificateTemplates/{certificateTemplateId}
     * @allow (get, list)
     * @allow (create)
     * @allow (update)
     * @allow (delete)
     * @deny None
     * @principle Certificate templates are publicly readable and writable.
     */
    match /certificateTemplates/{certificateTemplateId} {
      allow get, list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }

    /**
     * @description Allows the owner to manage their campaigns.
     * @path /users/{userId}/campaigns/{campaignId}
     * @allow (create) User with ID {userId} can create a campaign under their user document.
     * @allow (get, list) User with ID {userId} can read their own campaign.
     * @allow (update, delete) User with ID {userId} can update/delete their own campaign.
     * @deny Any other user trying to create/read/update/delete this campaign.
     * @principle Enforces document ownership for campaigns.
     */
    match /users/{userId}/campaigns/{campaignId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows the owner to manage delivery statuses for their campaigns.
     * @path /users/{userId}/campaigns/{campaignId}/deliveryStatuses/{deliveryStatusId}
     * @allow (create) User with ID {userId} can create a delivery status under their campaign.
     * @allow (get, list) User with ID {userId} can read their own delivery status.
     * @allow (update, delete) User with ID {userId} can update/delete their own delivery status.
     * @deny Any other user trying to create/read/update/delete this delivery status.
     * @principle Enforces document ownership for delivery statuses within a campaign.
     */
    match /users/{userId}/campaigns/{campaignId}/deliveryStatuses/{deliveryStatusId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}